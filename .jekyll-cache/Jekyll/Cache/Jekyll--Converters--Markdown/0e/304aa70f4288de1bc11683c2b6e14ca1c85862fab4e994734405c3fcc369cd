I"y<h2 id="集群健康">集群健康</h2>

<h3 id="集群状态总览">集群状态总览</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://10.128.10.179:9200/_cluster/health

//返回如下
{
"cluster_name": "gfask-cluster",
"status": "yellow",
"timed_out": false,
"number_of_nodes": 1,
"number_of_data_nodes": 1,
"active_primary_shards": 160,
"active_shards": 160,
"relocating_shards": 0,
"initializing_shards": 0,
"unassigned_shards": 155, //是已经在集群状态中存在的分片，但是实际在集群里又找不着。通常未分配分片的来源是未分配的副本。
"delayed_unassigned_shards": 0,
"number_of_pending_tasks": 0,
"number_of_in_flight_fetch": 0
}
</code></pre></div></div>

<p>响应信息中最重要的一块就是 <code class="language-plaintext highlighter-rouge">status</code> 字段。状态可能是下列三个值之一：</p>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">green</code></strong></p>

    <p>所有的主分片和副本分片都已分配。你的集群是 100% 可用的。</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">yellow</code></strong></p>

    <p>所有的主分片已经分片了，但至少还有一个副本是缺失的。不会有数据丢失，所以搜索结果依然是完整的。不过，你的高可用性在某种程度上被弱化。如果 <em>更多的</em> 分片消失，你就会丢数据了。把 <code class="language-plaintext highlighter-rouge">yellow</code> 想象成一个需要及时调查的警告。</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">red</code></strong></p>

    <p>至少一个主分片（以及它的全部副本）都在缺失中。这意味着你在缺少数据：搜索只能返回部分数据，而分配到这个分片上的写入请求会返回一个异常。</p>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">green</code>/<code class="language-plaintext highlighter-rouge">yellow</code>/<code class="language-plaintext highlighter-rouge">red</code> 状态是一个概览你的集群并了解眼下正在发生什么的好办法。剩下来的指标给你列出来集群的状态概要：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">number_of_nodes</code> 和 <code class="language-plaintext highlighter-rouge">number_of_data_nodes</code> 这个命名完全是自描述的。</li>
  <li><code class="language-plaintext highlighter-rouge">active_primary_shards</code> 指出你集群中的主分片数量。这是涵盖了所有索引的汇总值。</li>
  <li><code class="language-plaintext highlighter-rouge">active_shards</code> 是涵盖了所有索引的_所有_分片的汇总值，即包括副本分片。</li>
  <li><code class="language-plaintext highlighter-rouge">relocating_shards</code> 显示当前正在从一个节点迁往其他节点的分片的数量。通常来说应该是 0，不过在 Elasticsearch 发现集群不太均衡时，该值会上涨。比如说：添加了一个新节点，或者下线了一个节点。</li>
  <li><code class="language-plaintext highlighter-rouge">initializing_shards</code> 是刚刚创建的分片的个数。比如，当你刚创建第一个索引，分片都会短暂的处于 <code class="language-plaintext highlighter-rouge">initializing</code> 状态。这通常会是一个临时事件，分片不应该长期停留在 <code class="language-plaintext highlighter-rouge">initializing</code> 状态。你还可能在节点刚重启的时候看到 <code class="language-plaintext highlighter-rouge">initializing</code> 分片：当分片从磁盘上加载后，它们会从 <code class="language-plaintext highlighter-rouge">initializing</code> 状态开始。</li>
  <li><code class="language-plaintext highlighter-rouge">unassigned_shards</code> 是已经在集群状态中存在的分片，但是实际在集群里又找不着。通常未分配分片的来源是未分配的副本。比如，一个有 5 分片和 1 副本的索引，在单节点集群上，就会有 5 个未分配副本分片。如果你的集群是 <code class="language-plaintext highlighter-rouge">red</code> 状态，也会长期保有未分配分片（因为缺少主分片）。</li>
</ul>

<h3 id="集群索引状态清单用于定位具体故障索引">集群索引状态清单（用于定位具体故障索引）</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://10.128.10.179:9200/_cluster/health?level=indices
</code></pre></div></div>

<h3 id="每个索引里每个分片的状态和位置">每个索引里每个分片的状态和位置</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://10.128.10.179:9200/_cluster/health?level=shards
</code></pre></div></div>

<h2 id="监控单个节点">监控单个节点</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://10.128.10.179:9200/_nodes/stats
</code></pre></div></div>

<p>此接口返回包含集群的每一个节点统计值，用来评估节点的性能瓶颈。</p>

<h3 id="索引部分">索引部分</h3>

<p>索引(indices) 部分列出了这个节点上所有索引的聚合过的统计值：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">docs</code>展示节点内存有多少文档，包括还没有从段里清除的已删除文档数量。</li>
  <li><code class="language-plaintext highlighter-rouge">store</code> 部分显示节点耗用了多少物理存储。这个指标包括主分片和副本分片在内。如果限流时间很大，那可能表明你的磁盘限流设置得过低（在<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/indexing-performance.html#segments-and-merging">段和合并</a>里讨论过）。</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span><span class="w"> </span><span class="err">生产环境</span><span class="w">
</span><span class="err">indices</span><span class="s2">":{
    "</span><span class="err">docs</span><span class="s2">":{
      "</span><span class="err">count</span><span class="s2">":1066173,
      "</span><span class="err">deleted</span><span class="s2">":53914
    },
      "</span><span class="err">store</span><span class="s2">":{
        "</span><span class="err">size_in_bytes</span><span class="s2">":3429169540,
        "</span><span class="err">throttle_time_in_millis</span><span class="s2">":792608
      },
// 测试环境 
"</span><span class="err">indices</span><span class="s2">": {
    "</span><span class="err">docs</span><span class="s2">": {
        "</span><span class="err">count</span><span class="s2">": 62208,
        "</span><span class="err">deleted</span><span class="s2">": 9415
    },
    "</span><span class="err">store</span><span class="s2">": {
        "</span><span class="err">size_in_bytes</span><span class="s2">": 154985290,
        "</span><span class="err">throttle_time_in_millis</span><span class="s2">": 43044
    },
</span></code></pre></div></div>

<hr />

<p>返回的统计值被归入以下部分：</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">get</code> 显示通过 ID 获取文档的接口相关的统计值。包括对单个文档的 <code class="language-plaintext highlighter-rouge">GET</code> 和 <code class="language-plaintext highlighter-rouge">HEAD</code> 请求。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">search</code> 描述在活跃中的搜索（ <code class="language-plaintext highlighter-rouge">open_contexts</code> ）数量、查询的总数量、以及自节点启动以来在查询上消耗的总时间。用 <code class="language-plaintext highlighter-rouge">query_time_in_millis / query_total</code> 计算的比值，可以用来粗略的评价你的查询有多高效。比值越大，每个查询花费的时间越多，你应该要考虑调优了。</p>

    <p>fetch 统计值展示了查询处理的后一半流程（query-then-fetch 里的 <em>fetch</em> ）。如果 fetch 耗时比 query 还多，说明磁盘较慢，或者获取了太多文档，或者可能搜索请求设置了太大的分页（比如， <code class="language-plaintext highlighter-rouge">size: 10000</code> ）。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">merges</code> 包括了 Lucene 段合并相关的信息。它会告诉你目前在运行几个合并，合并涉及的文档数量，正在合并的段的总大小，以及在合并操作上消耗的总时间。</p>

    <p>在你的集群写入压力很大时，合并统计值非常重要。合并要消耗大量的磁盘 I/O 和 CPU 资源。如果你的索引有大量的写入，同时又发现大量的合并数，一定要去阅读<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/indexing-performance.html">索引性能技巧</a>。</p>

    <p>注意：文档更新和删除也会导致大量的合并数，因为它们会产生最终需要被合并的段 <em>碎片</em> 。</p>
  </li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span><span class="w"> </span><span class="err">生产环境</span><span class="w">
 </span><span class="nl">"search"</span><span class="p">:{</span><span class="w">
   </span><span class="nl">"open_contexts"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
   </span><span class="nl">"query_total"</span><span class="p">:</span><span class="mi">3601296</span><span class="p">,</span><span class="w">
   </span><span class="nl">"query_time_in_millis"</span><span class="p">:</span><span class="mi">200795495</span><span class="p">,</span><span class="w">
   </span><span class="nl">"query_current"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
   </span><span class="nl">"fetch_total"</span><span class="p">:</span><span class="mi">2845835</span><span class="p">,</span><span class="w">
   </span><span class="nl">"fetch_time_in_millis"</span><span class="p">:</span><span class="mi">154850468</span><span class="p">,</span><span class="w">
   </span><span class="nl">"fetch_current"</span><span class="p">:</span><span class="mi">0</span><span class="w">
 </span><span class="p">}</span><span class="err">,</span><span class="w">
</span><span class="nl">"merges"</span><span class="p">:{</span><span class="w">
  </span><span class="nl">"current"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"current_docs"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"current_size_in_bytes"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"total"</span><span class="p">:</span><span class="mi">19188</span><span class="p">,</span><span class="w">
  </span><span class="nl">"total_time_in_millis"</span><span class="p">:</span><span class="mi">2538745</span><span class="p">,</span><span class="w">
  </span><span class="nl">"total_docs"</span><span class="p">:</span><span class="mi">14425820</span><span class="p">,</span><span class="w">
  </span><span class="nl">"total_size_in_bytes"</span><span class="p">:</span><span class="mi">22678293953</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span><span class="err">//</span><span class="w"> </span><span class="err">测试环境</span><span class="w"> 
</span><span class="nl">"search"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"open_contexts"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"query_total"</span><span class="p">:</span><span class="w"> </span><span class="mi">265990</span><span class="p">,</span><span class="w">
  </span><span class="nl">"query_time_in_millis"</span><span class="p">:</span><span class="w"> </span><span class="mi">1614815</span><span class="p">,</span><span class="w">
  </span><span class="nl">"query_current"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"fetch_total"</span><span class="p">:</span><span class="w"> </span><span class="mi">148167</span><span class="p">,</span><span class="w">
  </span><span class="nl">"fetch_time_in_millis"</span><span class="p">:</span><span class="w"> </span><span class="mi">2289133</span><span class="p">,</span><span class="w">
  </span><span class="nl">"fetch_current"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span><span class="nl">"merges"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"current"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"current_docs"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"current_size_in_bytes"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"total"</span><span class="p">:</span><span class="w"> </span><span class="mi">877</span><span class="p">,</span><span class="w">
  </span><span class="nl">"total_time_in_millis"</span><span class="p">:</span><span class="w"> </span><span class="mi">293886</span><span class="p">,</span><span class="w">
  </span><span class="nl">"total_docs"</span><span class="p">:</span><span class="w"> </span><span class="mi">1974785</span><span class="p">,</span><span class="w">
  </span><span class="nl">"total_size_in_bytes"</span><span class="p">:</span><span class="w"> </span><span class="mi">2398768002</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">

</span></code></pre></div></div>

<p>在你的集群写入压力很大时，合并统计值非常重要。合并要消耗大量的磁盘 I/O 和 CPU 资源。如果你的索引有大量的写入，同时又发现大量的合并数，一定要去阅读<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/indexing-performance.html">索引性能技巧</a>。</p>

<p>注意：文档更新和删除也会导致大量的合并数，因为它们会产生最终需要被合并的段 <em>碎片</em> 。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">segments</code> 会展示这个节点目前正在服务中的 Lucene 段的数量。这是一个重要的数字。大多数索引会有大概 50–150 个段，哪怕它们存有 TB 级别的数十亿条文档。段数量过大表明合并出现了问题（比如，合并速度跟不上段的创建）。注意这个统计值是节点上所有索引的汇聚总数。记住这点。</p>

<p><code class="language-plaintext highlighter-rouge">memory</code> 统计值展示了 Lucene 段自己用掉的内存大小。这里包括底层数据结构，比如倒排表，字典，和布隆过滤器等。太大的段数量会增加这些数据结构带来的开销，这个内存使用量就是一个方便用来衡量开销的度量值。</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">生产环境</span><span class="w">
 </span><span class="nl">"segments"</span><span class="p">:{</span><span class="w">
   </span><span class="nl">"count"</span><span class="p">:</span><span class="mi">68</span><span class="p">,</span><span class="w">
   </span><span class="nl">"memory_in_bytes"</span><span class="p">:</span><span class="mi">9045304</span><span class="p">,</span><span class="w">
   </span><span class="nl">"index_writer_memory_in_bytes"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
   </span><span class="nl">"index_writer_max_memory_in_bytes"</span><span class="p">:</span><span class="mi">92160000</span><span class="p">,</span><span class="w">
   </span><span class="nl">"version_map_memory_in_bytes"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
   </span><span class="nl">"fixed_bit_set_memory_in_bytes"</span><span class="p">:</span><span class="mi">0</span><span class="w">
 </span><span class="p">}</span><span class="err">,</span><span class="w">
</span><span class="err">//</span><span class="w"> </span><span class="err">测试环境</span><span class="w"> 
</span><span class="nl">"segments"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"count"</span><span class="p">:</span><span class="w"> </span><span class="mi">35</span><span class="p">,</span><span class="w">
  </span><span class="nl">"memory_in_bytes"</span><span class="p">:</span><span class="w"> </span><span class="mi">1237230</span><span class="p">,</span><span class="w">
  </span><span class="nl">"index_writer_memory_in_bytes"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"index_writer_max_memory_in_bytes"</span><span class="p">:</span><span class="w"> </span><span class="mi">81920000</span><span class="p">,</span><span class="w">
  </span><span class="nl">"version_map_memory_in_bytes"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"fixed_bit_set_memory_in_bytes"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="jvm-部分">JVM 部分</h3>

<p><code class="language-plaintext highlighter-rouge">jvm</code> 部分包括了运行 Elasticsearch 的 JVM 进程一些很关键的信息。最重要的，它包括了垃圾回收的细节，这对你的 Elasticsearch 集群的稳定性有着重大影响。</p>

<blockquote>
  <p><strong>垃圾回收入门</strong></p>

  <p>在我们描述统计值之前，先上一门速成课程讲解垃圾回收以及它对 Elasticsearch 的影响是非常有用的。如果你对 JVM 的垃圾回收很熟悉，请跳过这段。</p>

  <p>Java 是一门 <em>垃圾回收</em> 语言，也就是说程序员不用手动管理内存分配和回收。程序员只管写代码，然后 Java 虚拟机（JVM）按需分配内存，然后在稍后不再需要的时候清理这部分内存。</p>

  <p>当内存分配给一个 JVM 进程，它是分配到一个大块里，这个块叫做 <em>堆</em> 。JVM 把堆分成两组，用 <em>代</em> 来表示：</p>

  <ul>
    <li>
      <p><strong>新生代（或者伊甸园）</strong></p>

      <p>新实例化的对象分配的空间。新生代空间通常都非常小，一般在 100 MB–500 MB。新生代也包含两个 <em>幸存</em> 空间。</p>
    </li>
    <li>
      <p><strong>老生代</strong></p>

      <p>较老的对象存储的空间。这些对象预计将长期留存并持续上很长一段时间。老生代通常比新生代大很多。Elasticsearch 节点可以给老生代用到 30 GB。</p>
    </li>
  </ul>

  <p>当一个对象实例化的时候，它被放在新生代里。当新生代空间满了，就会发生一次新生代垃圾回收（GC）。依然是”存活”状态的对象就被转移到一个幸存区内，而”死掉”的对象被移除。如果一个对象在多次新生代 GC 中都幸存了，它就会被”终身”置于老生代了。</p>

  <p>类似的过程在老生代里同样发生：空间满的时候，发生一次垃圾回收，死掉的对象被移除。</p>

  <p>不过，天下没有免费的午餐。新生代、老生代的垃圾回收都有一个阶段会“停止时间”。在这段时间里，JVM 字面意义上的停止了程序运行，以便跟踪对象图，收集死亡对象。在这个时间停止阶段，一切都不会发生。请求不被服务，ping 不被回应，分片不被分配。整个世界都真的停止了。</p>

  <p>对于新生代，这不是什么大问题；那么小的空间意味着 GC 会很快执行完。但是老生代大很多，而这里面一个慢 GC 可能就意味着 1 秒乃至 15 秒的暂停——对于服务器软件来说这是不可接受的。</p>

  <p>JVM 的垃圾回收采用了 <em>非常</em> 精密的算法，在减少暂停方面做得很棒。而且 Elasticsearch 非常努力的变成对 <em>垃圾回收友好</em> 的程序，比如内部智能的重用对象，重用网络缓冲，以及默认启用 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/docvalues.html">Doc Values</a> 功能。但最终，GC 的频率和时长依然是你需要去观察的指标。因为它是集群不稳定的头号嫌疑人。</p>

  <p>一个经常发生长 GC 的集群就会因为内存不足而处于高负载压力下。这些长 GC 会导致节点短时间内从集群里掉线。这种不稳定会导致分片频繁重定位，因为 Elasticsearch 会尝试保持集群均衡，保证有足够的副本在线。这接着就导致网络流量和磁盘 I/O 的增加。而所有这些都是在你的集群努力服务于正常的索引和查询的同时发生的。</p>

  <p>总而言之，长时间 GC 总是不好的，需要尽可能的减少。</p>
</blockquote>

<hr />

<p>因为垃圾回收对 Elasticsearch 是如此重要，你应该非常熟悉 <code class="language-plaintext highlighter-rouge">node-stats</code> API 里的这部分内容：</p>

<p><code class="language-plaintext highlighter-rouge">jvm</code> 部分首先列出一些和 heap 内存使用有关的常见统计值。你可以看到有多少 heap 被使用了，多少被指派了（当前被分配给进程的），以及 heap 被允许分配的最大值。理想情况下，<code class="language-plaintext highlighter-rouge">heap_committed_in_bytes</code> 应该等于 <code class="language-plaintext highlighter-rouge">heap_max_in_bytes</code> 。如果指派的大小更小，JVM 最终会被迫调整 heap 大小——这是一个非常昂贵的操作。如果你的数字不相等，阅读 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/heap-sizing.html">堆内存:大小和交换</a> 学习如何正确的配置它。</p>

<p><code class="language-plaintext highlighter-rouge">heap_used_percent</code> 指标是值得关注的一个数字。Elasticsearch 被配置为当 heap 达到 75% 的时候开始 GC。如果你的节点一直 &gt;= 75%，你的节点正处于 <em>内存压力</em> 状态。这是个危险信号，不远的未来可能就有慢 GC 要出现了。</p>

<p>如果 heap 使用率一直 &gt;=85%，你就麻烦了。Heap 在 90–95% 之间，则面临可怕的性能风险，此时最好的情况是长达 10–30s 的 GC，最差的情况就是内存溢出（OOM）异常。</p>

<p>GC 花费的时间也很重要。比如，在索引文档时，一系列垃圾生成了。这是很常见的情况，每时每刻都会导致 GC。这些 GC 绝大多数时候都很快，对节点影响很小：新生代一般就花一两毫秒，老生代花一百多毫秒。这些跟 10 秒级别的 GC 是很不一样的。</p>

<p>我们的最佳建议是定期收集 GC 计数和时长（或者使用 Marvel）然后观察 GC 频率。你也可以开启慢 GC 日志记录，在 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/logging.html">日志记录</a> 小节已经讨论过。</p>

<p>// to do – install marvel观察GC时长 https://www.elastic.co/cn/downloads/marvel</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//生产环境</span><span class="w">
 </span><span class="nl">"jvm"</span><span class="p">:{</span><span class="w">
   </span><span class="nl">"timestamp"</span><span class="p">:</span><span class="mi">1596074408763</span><span class="p">,</span><span class="w">
   </span><span class="nl">"uptime_in_millis"</span><span class="p">:</span><span class="mi">42632257232</span><span class="p">,</span><span class="w">
   </span><span class="nl">"mem"</span><span class="p">:{</span><span class="w">
     </span><span class="nl">"heap_used_in_bytes"</span><span class="p">:</span><span class="mi">511948848</span><span class="p">,</span><span class="w">
     </span><span class="nl">"heap_used_percent"</span><span class="p">:</span><span class="mi">49</span><span class="p">,</span><span class="w">
     </span><span class="nl">"heap_committed_in_bytes"</span><span class="p">:</span><span class="mi">1038876672</span><span class="p">,</span><span class="w">
     </span><span class="nl">"heap_max_in_bytes"</span><span class="p">:</span><span class="mi">1038876672</span><span class="p">,</span><span class="w">
     </span><span class="nl">"non_heap_used_in_bytes"</span><span class="p">:</span><span class="mi">112445176</span><span class="p">,</span><span class="w">
     </span><span class="nl">"non_heap_committed_in_bytes"</span><span class="p">:</span><span class="mi">114618368</span><span class="p">,</span><span class="w">
    
   </span><span class="nl">"gc"</span><span class="p">:{</span><span class="w">
     </span><span class="nl">"collectors"</span><span class="p">:{</span><span class="w">
       </span><span class="nl">"young"</span><span class="p">:{</span><span class="w">
         </span><span class="nl">"collection_count"</span><span class="p">:</span><span class="mi">1496995</span><span class="p">,</span><span class="w">
         </span><span class="nl">"collection_time_in_millis"</span><span class="p">:</span><span class="mi">6607399</span><span class="w">
       </span><span class="p">},</span><span class="w">
     </span><span class="nl">"old"</span><span class="p">:{</span><span class="w">
       </span><span class="nl">"collection_count"</span><span class="p">:</span><span class="mi">532</span><span class="p">,</span><span class="w">
       </span><span class="nl">"collection_time_in_millis"</span><span class="p">:</span><span class="mi">24089</span><span class="w">
    	 </span><span class="p">}</span><span class="w">

</span><span class="err">//测试环境</span><span class="w">
</span><span class="nl">"jvm"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"timestamp"</span><span class="p">:</span><span class="w"> </span><span class="mi">1596162121893</span><span class="p">,</span><span class="w">
  </span><span class="nl">"uptime_in_millis"</span><span class="p">:</span><span class="w"> </span><span class="mi">35233016120</span><span class="p">,</span><span class="w">
  </span><span class="nl">"mem"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"heap_used_in_bytes"</span><span class="p">:</span><span class="w"> </span><span class="mi">436156360</span><span class="p">,</span><span class="w">
    </span><span class="nl">"heap_used_percent"</span><span class="p">:</span><span class="w"> </span><span class="mi">41</span><span class="p">,</span><span class="w">
    </span><span class="nl">"heap_committed_in_bytes"</span><span class="p">:</span><span class="w"> </span><span class="mi">1038876672</span><span class="p">,</span><span class="w">
    </span><span class="nl">"heap_max_in_bytes"</span><span class="p">:</span><span class="w"> </span><span class="mi">1038876672</span><span class="p">,</span><span class="w">
    </span><span class="nl">"non_heap_used_in_bytes"</span><span class="p">:</span><span class="w"> </span><span class="mi">104950336</span><span class="p">,</span><span class="w">
    </span><span class="nl">"non_heap_committed_in_bytes"</span><span class="p">:</span><span class="w"> </span><span class="mi">107356160</span><span class="p">,</span><span class="w">

  </span><span class="p">}</span><span class="w">
  </span><span class="nl">"gc"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"collectors"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"young"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"collection_count"</span><span class="p">:</span><span class="w"> </span><span class="mi">45333</span><span class="p">,</span><span class="w">
      </span><span class="nl">"collection_time_in_millis"</span><span class="p">:</span><span class="w"> </span><span class="mi">363118</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"old"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"collection_count"</span><span class="p">:</span><span class="w"> </span><span class="mi">248</span><span class="p">,</span><span class="w">
      </span><span class="nl">"collection_time_in_millis"</span><span class="p">:</span><span class="w"> </span><span class="mi">21963</span><span class="w">
    </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
</span><span class="p">},</span><span class="w">


</span></code></pre></div></div>

<p>refference:</p>

<ul>
  <li>
    <p>https://www.elastic.co/guide/cn/elasticsearch/guide/current/_monitoring_individual_nodes.html</p>
  </li>
  <li>
    <p>https://www.elastic.co/guide/en/elasticsearch/guide/current/_monitoring_individual_nodes.html</p>
  </li>
  <li>
    <p><a href="http://www.54tianzhisheng.cn/2018/08/04/why-see-es-code/">为什么要看ES源码</a></p>
  </li>
  <li>
    <p><a href="https://laijianfeng.org/2018/08/教你编译调试Elasticsearch-6-3-2源码/">https://laijianfeng.org/2018/08/%E6%95%99%E4%BD%A0%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95Elasticsearch-6-3-2%E6%BA%90%E7%A0%81/</a></p>
  </li>
</ul>

:ET